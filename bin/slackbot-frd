#!/usr/bin/env ruby

require 'thor'
require 'json'

require 'active_support/core_ext/string'

require 'slackbot_frd/initializer/bot_starter'
require 'slackbot_frd/lib/slack_connection'
require 'slackbot_frd/lib/bot'

begin
  require 'byebug'
rescue LoadError
end

DEBUG = true

PID_FILE_WATCHER = "/tmp/slackbot-frd-watcher.pid"
PID_FILE_CONNECTION = "/tmp/slackbot-frd-connection.pid"
BOT_LIST_FILE = "/tmp/slackbot-frd-bot-list.pid"
ERROR_FILE = "/tmp/slackbot-frd.errors"
DEFAULT_CONFIG_FILE = "slackbot-frd.conf"
LOG_FILE = "slackbot-frd.log"

class SlackbotFrdBin < Thor
  desc "list", "List all bots"
  long_desc <<-LONGDESC
    list will print out all available bots

    > $ slackbot-frd list -- List all installed bots
  LONGDESC
  def list
    # TODO
  end

  desc "status", "Report status on daemon procs"
  def status
    if running?(watcher_pid)
      puts "Daemon running as pid '#{watcher_pid}'".green
    else
      puts "Daemon not running".red
    end
  end

  desc "new <project-name>", "Generate a new slackbot_frd project"
  long_desc <<-LONGDESC
    new will generate a skeleton for a new slackbot_frd project
  LONGDESC
  option :nospec, type: :boolean, aliases: 'n'
  def new(proj_name)
    if Dir.exists?(proj_name)
      puts "Directory '#{proj_name}' already exists".red
      return
    end
    Dir.mkdir(proj_name)
    Dir.chdir(proj_name)
    genconfig
    File.write("Gemfile", <<-GEMFILE.strip_heredoc)
      source "https://rubygems.org"

      gem "slackbot_frd"
    GEMFILE
    Dir.mkdir("bots")
    write_example_bot("bots/example_bot.rb")
    Dir.mkdir("lib")

    unless options[:nospec]
      File.append("Gemfile", <<-GEMFILE.strip_heredoc)

      gem "rspec", "~> 3.2"
      GEMFILE
      Dir.mkdir("spec")
    end
  end

  desc "genconfig", "Generate a skeleton config file"
  long_desc <<-LONGDESC
    genconfig will generate a skeleton config file that
    can be customized
  LONGDESC
  def genconfig
    File.write(config_file_location, <<-CONFIG_FILE_SKELETON.strip_heredoc)
      {
          "token" : "<put-token-here>",
          "botdir" : ".",
          "daemonize" : false,
          "bots" : [],
          "log_level" : "debug",
          "log_file" : "my-cool-bot.log",
          "my_bots_config_option" : "<bot-specific-option>"
      }
    CONFIG_FILE_SKELETON
  end

  desc "start [bot1] [bot2] [botx...]", "Start all specified bots, or all bots"
  long_desc <<-LONGDESC
    start [bot1] [bot2] [botx...] will start the specified bots.
    If no bots are specified, all available bots will be run.

    params set via explicit flags will overwrite conflicting environment variables,
    and environment variables will overwrite conflicting config file params.

    > $ slackbot-frd start -- Start all available bots
  LONGDESC
  option :daemonize, type: :boolean, aliases: 'd'
  option :botdir, type: :string, aliases: 'b'
  option :token, type: :string, aliases: 't'
  option 'config-file', type: :string, aliases: 'c'
  option 'log-level', type: :string, aliases: 'll'
  option 'log-file', type: :string, aliases: 'lf'
  def start(*bots)
    if running?(watcher_pid)
      SlackbotFrd::Log.warn("Already running (watcher pid: '#{watcher_pid}').  Not starting again")
      return
    end

    delete_pid_files
    delfile(ERROR_FILE)

    config_file = options['config-file']
    config_file = config_file_location unless config_file
    $slackbotfrd_conf = config_file_json(config_file) if config_file
    $slackbotfrd_conf ||= {}
    $slackbotfrd_conf.freeze

    daemonize = false
    daemonize = $slackbotfrd_conf["daemonize"] if $slackbotfrd_conf["daemonize"]
    daemonize = ENV["SLACKBOT_FRD_DAEMONIZE"] if ENV["SLACKBOT_FRD_DAEMONIZE"]
    daemonize = options[:daemonize] if options[:daemonize]

    botdir = Dir.pwd
    botdir = $slackbotfrd_conf["botdir"] if $slackbotfrd_conf["botdir"]
    botdir = ENV["SLACKBOT_FRD_BOTDIR"] if ENV["SLACKBOT_FRD_BOTDIR"]
    botdir = options[:botdir] if options[:botdir]
    botdir = File.expand_path(botdir)

    SlackbotFrd::Log.logfile = "#{botdir}/#{LOG_FILE}"
    SlackbotFrd::Log.logfile = $slackbotfrd_conf["log_file"] if $slackbotfrd_conf["log_file"]
    SlackbotFrd::Log.logfile = ENV["SLACKBOT_FRD_LOG_FILE"] if ENV["SLACKBOT_FRD_LOG_FILE"]
    SlackbotFrd::Log.logfile = options["log-file"] if options['log-file']

    SlackbotFrd::Log.level = :info
    SlackbotFrd::Log.level = $slackbotfrd_conf["log_level"] if $slackbotfrd_conf["log_level"]
    SlackbotFrd::Log.level = ENV["SLACKBOT_FRD_LOG_LEVEL"] if ENV["SLACKBOT_FRD_LOG_LEVEL"]
    SlackbotFrd::Log.level = options["log-level"] if options['log-level']

    # If we got a number for log level that is valid, just use that
    if SlackbotFrd::Log.level =~ /\d+/ && SlackbotFrd::Log.levels.values.include?(SlackbotFrd::Log.level.to_i)
      SlackbotFrd::Log.level = SlackbotFrd::Log.levels.key(SlackbotFrd::Log.level.to_i)
    else
      SlackbotFrd::Log.level = SlackbotFrd::Log.level.to_sym
    end

    if !SlackbotFrd::Log.levels.keys.include?(SlackbotFrd::Log.level) &&
       !SlackbotFrd::Log.levels.values.include?(SlackbotFrd::Log.level)
      setval = SlackbotFrd::Log.level
      SlackbotFrd::Log.level = :info
      SlackbotFrd::Log.error("Invalid log level '#{setval}'.  Possible levels: #{SlackbotFrd::Log.levels.keys.map(&:to_s).join(" | ")}")
      return
    end

    SlackbotFrd::Log.info("Logging to file '#{SlackbotFrd::Log.logfile}'")

    SlackbotFrd::Log.warn("Logging to file '#{SlackbotFrd::Log.logfile}'")
    SlackbotFrd::Log.warn("Logging level set to '#{SlackbotFrd::Log.level}'")

    token = $slackbotfrd_conf["token"]
    token = ENV["SLACKBOT_FRD_TOKEN"] if ENV["SLACKBOT_FRD_TOKEN"]
    token = options[:token] if options[:token]
    unless token
      SlackbotFrd::Log.error("No token found.  Cannot authenticate to Slack")
      return
    end

    if daemonize
      Process.fork{ watch_connection(bots, token, botdir, true) }
    else
      watch_connection(bots, token, botdir)
    end
  end

  desc "stop", "Stop all bots"
  long_desc <<-LONGDESC
    stop will stop all bots

    > $ slackbot-frd stop -- Stop all running bots
  LONGDESC

  def stop
    # first kill the watcher, then kill the connection
    kill_pid(watcher_pid)
    kill_pid(connection_pid)

    delete_pid_files
    delfile(ERROR_FILE)
  end

  desc "restart", "Stop all bots and restart them"
  long_desc <<-LONGDESC
    restart will restart all bots

    > $ slackbot-frd restart -- Restart all running bots
  LONGDESC
  def restart
    stop
    start(set_bots)
  end
  private
  def config_file_location
    "#{Dir.pwd}/#{DEFAULT_CONFIG_FILE}"
  end

  private
  def config_file_json(config_file)
    if File.exists?(config_file)
      content = File.read(config_file)
      return JSON.parse(content)
    end
    nil
  end

  private
  def bots_from_file
    File.read(BOT_LIST_FILE).split
  end

  private
  def set_bots_in_file(bots)
    File.write(BOT_LIST_FILE, "#{bots.join("\n")}")
  end

  private
  def kill_pid(pid)
    # try 3 times to SIGINT the pid, then SIGKILL it
    3.times do
      break unless running?(pid)
      Process.kill('SIGINT', pid)
    end
    Process.kill('SIGKILL', pid) if running?(pid)
    # TODO log if the process is still running
  end

  private
  def watch_connection(bots, token, botdir, daemonize = false)
    Process.daemon if daemonize
    set_watcher_pid(Process.pid)
    until errors
      pid = Process.fork { BotStarter.start_bots(ERROR_FILE, token, botdir, bots) }
      set_connection_pid(pid)
      Process.wait(pid)
    end
    if errors
      SlackbotFrd::Log.error("Slack connection encountered errors: #{errors}")
      delfile(ERROR_FILE)
    end
    delete_pid_files
  end

  private
  def delfile(file)
    File.delete(file) if File.exists?(file)
  end

  private
  def errors
    return File.read(ERROR_FILE).split("\n") if File.exists?(ERROR_FILE)
    nil
  end

  private
  def running?(pid)
    return false unless pid
    begin
      Process.getpgid(pid.to_i)
      return true
    rescue Errno::ESRCH
      return false
    end
  end

  private
  def watcher_pid
    return File.read(PID_FILE_WATCHER).to_i if File.exists?(PID_FILE_WATCHER)
    nil
  end

  private
  def connection_pid
    return File.read(PID_FILE_CONNECTION).to_i if File.exists?(PID_FILE_CONNECTION)
    nil
  end

  private
  def set_watcher_pid(pid)
    File.write(PID_FILE_WATCHER, pid)
  end

  private
  def set_connection_pid(pid)
    File.write(PID_FILE_CONNECTION, pid)
  end

  private
  def delete_pid_files
    delfile(PID_FILE_WATCHER)
    delfile(PID_FILE_CONNECTION)
  end

  private
  def write_example_bot(file)
    File.write(file, <<-EXAMPLE_BOT.strip_heredoc)
      require 'slackbot_frd'

      # Subclass SlackbotFrd::Bot so that slackbot-frd start runs our bot
      class ExampleBot < SlackbotFrd::Bot
        def add_callbacks(slack_connection)
          # When a user sends a message, echo that message back in reverse
          slack_connection.on_message do |user:, channel:, message:, timestamp:|
            slack_connection.send_message(channel: channel, message: message.reverse)
          end

          # When a user joins a channel, greet that user as a bot
          slack_connection.on_channel_joined do |user:, channel:|
            slack_connection.send_message_as_user(
              channel: channel,
              message: ":skull: ohai \#{user}, welcome to #\#{channel}! :ghost:",
              username: "Graveyard Greeting Bot",
              emoji: ":graveyard:"
            )
          end
        end
      end
    EXAMPLE_BOT
  end
end

SlackbotFrdBin.start(ARGV)
